 AccountDetailsResult mockResult = mock(AccountDetailsResult.class);  whenNew(AccountDetailsResult.class).withNoArguments().thenReturn(mockResult);  doNothing().when(mockResult).convertPostRouteResult(any(String.class), any(String.class));  mockService.executeCommand(); }
 // Use easymock @Test public void testMWServiceException() throws MWServiceException, Exception {  GetAccountDetailService mockService = PowerMock.createPartialMock(GetAccountDetailService.class, "getSecurityContext");    PowerMock.expectPrivate(mockService, "getSecuirtyContext").andReturn(new SecurityContext());  replay(mockService);  exception.expect(MWServiceException.class);  mockService.executeCommand(); }}
public class GetAccountDetailService implements ICommand {        private String commandName;
    private String accountNumber;
    private static CustomLogger logger = (CustomLogger) CustomLogger.getLogger(GetAccountDetailService.class.getName());     public GetAccountDetailService(String name, String accountNumber){        if(name == null || name.trim().length() == 0){            throw new IllegalArgumentException("No name specified for command");        }        if(accountNumber == null || accountNumber.trim().length() == 0 || accountNumber.trim().length() != 16)        {            throw new IllegalArgumentException("Invalid  Account specified for command - " + accountNumber);        }        this.commandName = name;        this.accountNumber = accountNumber.trim();    }
 public IResult executeCommand() throws MWServiceException {  final String MN = "executeCommand";  if (logger.isTraceEnabled()) {   logger.methodEntry(MN);  }
  AccountDetailsResult aResult = new AccountDetailsResult();  CTIServiceClient client;  String routingStrategy = null;  String handlingStrategy = null;  RequestContext rc = null;    SecurityContext sc = getSecurityContext();
  // initialize the error code  aResult.setErrorCode("1");   client = ANILookupService.getClient();    if(client != null){   CTIAcctDetailsResult result = client.getAccountDetails(rc, sc, accountNumber);
   if (result != null) {    if (result.getStatusInfo().getUrsResponseCode() == 0) {     CTIAccountDetails acctDetails = result.getAccountDetails();
     if (acctDetails != null) {      handlingStrategy = acctDetails.getHandlingStrategy();      routingStrategy = acctDetails.getRoutingStrategy();            logger.debug("AccountNumber : " + accountNumber + " HandlingStratergy : " + handlingStrategy + " RoutingStratergy : " + routingStrategy);
      if (routingStrategy == null || routingStrategy.length() == 0) {       aResult.setErrorMsg("Invalid  routingStratergy returned " + routingStrategy);       logger.error("Invalid  routingStratergy for AccountNumber - " + accountNumber);      }      if (handlingStrategy == null || handlingStrategy.length() == 0) {       aResult.setErrorMsg("Invalid  handlingStratergy returned " + handlingStrategy);       logger.error("Invalid  handlingStrategy for AccountNumber - " + accountNumber);      }
      aResult.convertPostRouteResult(handlingStrategy, routingStrategy);      aResult.setErrorCode("0");     } else {      aResult.setErrorMsg("No details for AccountNumber = " + accountNumber);      logger.error("No details for AccountNumber - " + accountNumber);     }    } else {     aResult.setErrorMsg("No match found for AccountNumber = " + accountNumber);     logger.error("No match found for AccountNumber - " + accountNumber);    }   }  }  return aResult; }     private SecurityContext getSecurityContext() throws MWServiceException{     // Use CyberArk technology retrieve credential from password vault    }
    public String getCommandName() {        return commandName;    }
    public String getAccountNumber() {        return accountNumber;    }}
