ackage org.yqian.disney.config;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import springfox.documentation.builders.PathSelectors;
import springfox.documentation.builders.RequestHandlerSelectors;
import springfox.documentation.spi.DocumentationType;
import springfox.documentation.spring.web.plugins.Docket;
import springfox.documentation.swagger2.annotations.EnableSwagger2;
@Configuration
@EnableSwagger2
public class SwaggerConfig {
    @Bean
    public Docket api() {
        return new Docket(DocumentationType.SWAGGER_2)
                .select()
                .apis(RequestHandlerSelectors.basePackage("org.yqian.disney.controller"))
                .paths(PathSelectors.any())
                .build();
    }
}

package org.yqian.disney.controller;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.yqian.disney.model.User;
import org.yqian.disney.service.UserService;
import java.util.List;
@RestController
@RequestMapping("/api")
public class UserController {

    private static final Logger LOGGER = LoggerFactory.getLogger(UserController.class);
    @Autowired
    private UserService service;
    @GetMapping("/user/{id}")
    public ResponseEntity<User> getUser(@PathVariable("id") int id) {
        LOGGER.info("get User by ID " + id);
        User u = service.getUser(id);
        if (u == null)
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        return new ResponseEntity<>(u, HttpStatus.OK);
    }

    @GetMapping(value = "/user")
    public ResponseEntity<List<User>> listUsers() {
        LOGGER.info("Get all user info");
        List<User> list = service.listUser();
        if (list.isEmpty())
            return new ResponseEntity<>(HttpStatus.NO_CONTENT);
        return new ResponseEntity<>(list, HttpStatus.OK);
    }

    @PutMapping(value = "/user/{id}")
    public ResponseEntity<?> updateUser(@PathVariable("id") int id, @RequestBody User u) {
        User user = service.getUser(id);
        if (user == null)
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        service.updateUser(u);
        return new ResponseEntity<>(HttpStatus.OK);
    }

    @DeleteMapping(value = "/user/{id}")
    public ResponseEntity<?> deleteUser(@PathVariable("id") int id) {
        User user = service.getUser(id);
        if (user == null)
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        service.deleteUser(user);
        return new ResponseEntity<>(HttpStatus.OK);
    }

    @DeleteMapping(value = "/user/clear")
    public ResponseEntity<List<User>> deleteAllUser() {
        service.deleteAllUser();
        return new ResponseEntity<>(HttpStatus.NO_CONTENT);
    }
}

package org.yqian.disney.model;
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import lombok.*;
import javax.persistence.Entity;
import javax.persistence.Id;
import java.io.Serializable;
@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"})
@Entity
@Getter
@Setter
@NoArgsConstructor
public class User implements Serializable {
    @Id
    private int id;
    private String firstName;
    private String lastName;
    private char[] password;
}

package org.yqian.disney.repository;
import org.springframework.data.jpa.repository.JpaRepository;
import org.yqian.disney.model.User;
public interface UserRepository extends JpaRepository<User, Integer> {
}

package org.yqian.disney.service;
import org.yqian.disney.model.User;
import java.util.List;
public interface UserService {

    List<User> listUser();
    User getUser(int id);
    void updateUser(User u);
    void deleteUser(User u);
    void deleteAllUser();
}

package org.yqian.disney.service;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.yqian.disney.model.User;
import org.yqian.disney.repository.UserRepository;
import java.util.List;
@Service("userService")
public class UserServiceImpl implements UserService {

    @Autowired
    private UserRepository userRepository;
    @Override
    public List<User> listUser() {
        return userRepository.findAll();
    }

    @Override
    public User getUser(int id) {
        return userRepository.getOne(id);
    }

    @Override
    public void updateUser(User u) {
        userRepository.save(u);
    }

    @Override
    public void deleteUser(User u) {
        userRepository.delete(u);
    }

    @Override
    public void deleteAllUser() {
        userRepository.deleteAll();
    }
}

package org.yqian.disney;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
@SpringBootApplication(scanBasePackages = {"org.yqian.disney"})
public class DisneyUserApp {
    public static void main(String[] args) {
        SpringApplication.run(DisneyUserApp.class, args);
    }
}

spring:
  datasource:
    url: jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
    platform: h2
    username: sa
    password:
    driverClassName: org.h2.Driver
  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: create
    properties:
      show_sql: true
      use_sql_comments: true
      format_sql: true
  h2:
    console:
      enabled: true
      path: /h2_console
      settings:
        trace: false
        web-allow-others: false
  logging:
    level:
      org.yqian.SimpleSpringBootRest: INFO
      
insert into User values(1, 'John', 'Smith', 'CEO-pass');
insert into User values(10, 'Richard', 'Roe', 'CFO-pass');
insert into User values(100, 'Karl', 'Junior', 'CGO-pass');

package org.yqian.disney.controller;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.type.TypeFactory;
import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.boot.test.mock.mockito.MockBean;
import org.springframework.http.MediaType;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.MvcResult;
import org.springframework.test.web.servlet.RequestBuilder;
import org.springframework.test.web.servlet.request.MockMvcRequestBuilders;
import org.yqian.disney.model.User;
import org.yqian.disney.service.UserService;
import java.util.ArrayList;
import java.util.List;
import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.delete;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
@RunWith(SpringRunner.class)
@WebMvcTest(controllers = UserController.class)
public class UserControllerTest {

    @Autowired
    private MockMvc mockMvc;
    @MockBean
    private UserService mockService;
    private final ObjectMapper mapper = new ObjectMapper();
    private final List<User> list = new ArrayList<>();
    @Before
    public void setupUserList() {
        User u = new User();
        u.setId(1);
        u.setFirstName("Joe");
        u.setLastName("Schmo");
        u.setPassword("big-pass".toCharArray());
        list.add(u);
        u = new User();
        u.setId(10);
        u.setFirstName("Jane");
        u.setLastName("Doe");
        u.setPassword("small-pass".toCharArray());
        list.add(u);
        u = new User();
        u.setId(100);
        u.setFirstName("Mary");
        u.setLastName("Major");
        u.setPassword("tiny-pass".toCharArray());
        list.add(u);
    }

    @Test
    public void testListUser() throws Exception {
        when(mockService.listUser()).thenReturn(list);
        MvcResult result = mockMvc.perform(get("/api/user")).andReturn();
        TypeFactory factory = mapper.getTypeFactory();
        List<User> uList = mapper.readValue(result.getResponse().getContentAsString(), factory.constructCollectionType(List.class, User.class));
        int expected = 3;
        assertThat(uList.size()).isEqualTo(expected);
    }

    @Test
    public void testListUserNoContent() throws Exception {
        when(mockService.listUser()).thenReturn(new ArrayList<User>());
        RequestBuilder builder = MockMvcRequestBuilders.get("/api/user").accept(MediaType.APPLICATION_JSON);
        MvcResult result = mockMvc.perform(builder).andReturn();
        assertThat(result.getResponse().getStatus()).isEqualTo(204);
    }

    @Test
    public void testGetUser() throws Exception {
        when(mockService.getUser(1)).thenReturn(list.get(0));
        MvcResult result = mockMvc.perform(get("/api/user/1")).andReturn();
        User u = mapper.readValue(result.getResponse().getContentAsString(), User.class);
        String expected = "Joe";
        assertThat(u.getFirstName()).isEqualTo(expected);
    }

    @Test
    public void testGetUserNoFound() throws Exception {
        when(mockService.getUser(1000)).thenReturn(null);
        RequestBuilder builder = MockMvcRequestBuilders.get("/api/user/1000").accept(MediaType.APPLICATION_JSON);
        MvcResult result = mockMvc.perform(builder).andReturn();
        assertThat(result.getResponse().getStatus()).isEqualTo(404);
    }

    @Test
    public void testUpdateUser() throws Exception {
        User u = new User();
        u.setId(1);
        u.setFirstName("Joe");
        u.setLastName("Schmo");
        u.setPassword("my-pass".toCharArray());
        when(mockService.getUser(1)).thenReturn(u);
        String userAsJsonString = mapper.writeValueAsString(u);
        RequestBuilder builder = MockMvcRequestBuilders.put("/api/user/1", u).contentType(MediaType.APPLICATION_JSON).content(userAsJsonString);
        MvcResult result = mockMvc.perform(builder).andReturn();
        assertThat(result.getResponse().getStatus()).isEqualTo(200);
    }

    @Test
    public void testUpdateUserNotFound() throws Exception {
        User u = new User();
        u.setId(1);
        u.setFirstName("Joe");
        u.setLastName("Schmo");
        u.setPassword("big-pass".toCharArray());
        when(mockService.getUser(1000)).thenReturn(null);
        String userAsJsonString = mapper.writeValueAsString(u);
        RequestBuilder builder = MockMvcRequestBuilders.put("/api/user/1000", u).contentType(MediaType.APPLICATION_JSON).content(userAsJsonString);
        MvcResult result = mockMvc.perform(builder).andReturn();
        assertThat(result.getResponse().getStatus()).isEqualTo(404);
    }

    @Test
    public void testDeleteUser() throws Exception {
        when(mockService.getUser(1)).thenReturn(list.get(0));
        MvcResult result = mockMvc.perform(delete("/api/user/1", 1)).andReturn();
        assertThat(result.getResponse().getStatus()).isEqualTo(200);
    }

    @Test
    public void testDeleteUserNotFound() throws Exception {
        when(mockService.getUser(1000)).thenReturn(null);
        MvcResult result = mockMvc.perform(delete("/user/1000", 1000)).andReturn();
        assertThat(result.getResponse().getStatus()).isEqualTo(404);
    }

    @Test
    public void testDeleteAllUser() throws Exception {
        MvcResult result = mockMvc.perform(delete("/api/user/clear")).andReturn();
        assertThat(result.getResponse().getStatus()).isEqualTo(204);
    }
}

package org.yqian.disney.service;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
import org.springframework.test.annotation.Rollback;
import org.springframework.test.context.junit4.SpringRunner;
import org.yqian.disney.model.User;
import org.yqian.disney.repository.UserRepository;
import java.util.List;
import static org.assertj.core.api.Assertions.assertThat;
@RunWith(SpringRunner.class)
@DataJpaTest
public class UserServiceImplTest {
    @Autowired
    private UserRepository userRepository;
    @Test
    public void testListUser() {
        List<User> uList = userRepository.findAll();
        int expected = 3;
        assertThat(uList.size()).isEqualTo(expected);
    }

    @Test
    public void testGetUser() {
        User u = userRepository.getOne(1);
        char[] expected = "CEO-pass".toCharArray();
        assertThat(u.getPassword()).isEqualTo(expected);
    }

    @Test
    public void testUpdateUser() {
        User u = new User();
        u.setId(1);
        u.setFirstName("Joe");
        u.setLastName("Schmo");
        u.setPassword("my-pass".toCharArray());
        userRepository.save(u);
        User user = userRepository.getOne(1);
        assertThat(user.getPassword()).isEqualTo("my-pass".toCharArray());
    }

    @Test
    @Rollback
    public void testDeleteUser() {
        User u = new User();
        u.setId(1);
        u.setFirstName("Joe");
        u.setLastName("Schmo");
        u.setPassword("my-pass".toCharArray());
        userRepository.delete(u);
        List<User> uList = userRepository.findAll();
        int expected = 2;
        assertThat(uList.size()).isEqualTo(expected);
    }

    @Test
    @Rollback
    public void testDeleteAllUser() {
        userRepository.deleteAll();
        List<User> uList = userRepository.findAll();
        assertThat(uList).isEmpty();
    }
}


<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>org.yqian</groupId>
    <artifactId>DisneyUser</artifactId>
    <version>1.0-SNAPSHOT</version>
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.0.5.RELEASE</version>
    </parent>
    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger2</artifactId>
            <version>2.9.0</version>
        </dependency>
        <dependency>
            <groupId>io.springfox</groupId>
            <artifactId>springfox-swagger-ui</artifactId>
            <version>2.9.0</version>
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>1.16.8</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <scope>runtime</scope>
        </dependency>
    </dependencies>
    <properties>
        <java.version>1.8</java.version>
    </properties>
    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
</project>
